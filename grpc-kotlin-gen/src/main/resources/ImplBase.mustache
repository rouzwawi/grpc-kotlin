{{#packageName}}
package {{packageName}}
{{/packageName}}

import {{packageName}}.{{serviceName}}Grpc.*

import io.grpc.*
import io.grpc.stub.*
import io.rouz.grpc.*

import kotlin.coroutines.*
import kotlinx.coroutines.*
import kotlinx.coroutines.channels.*

{{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
{{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
@javax.annotation.Generated(
    value = ["by gRPC Kotlin generator"],
    comments = "Source: {{protoName}}"
)
abstract class {{serviceName}}ImplBase(
    coroutineContext: CoroutineContext = Dispatchers.Default
) : BindableService, CoroutineScope {

    private val _coroutineContext: CoroutineContext = coroutineContext

    override val coroutineContext: CoroutineContext
        get() = ContextCoroutineContextElement() + _coroutineContext

    {{#methods}}
    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    {{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
    {{^isManyInput}}
    {{^isManyOutput}}
    {{! == unary req, unary resp == }}
    open suspend fun {{methodName}}(request: {{inputType}}): {{outputType}} {
        throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
    }

    internal fun {{methodName}}Internal(
        request: {{inputType}},
        responseObserver: StreamObserver<{{outputType}}>
    ) {
        launch {
            tryCatchingStatus(responseObserver) {
                val response = {{methodName}}(request)
                onNext(response)
            }
        }
    }
    {{/isManyOutput}}
    {{#isManyOutput}}
    {{! == unary req, streaming resp == }}
    open fun {{methodName}}(request: {{inputType}}): ReceiveChannel<{{outputType}}> {
        throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
    }

    internal fun {{methodName}}Internal(
        request: {{inputType}},
        responseObserver: StreamObserver<{{outputType}}>
    ) {
        launch {
            tryCatchingStatus(responseObserver) {
                val responses = {{methodName}}(request)
                for (response in responses) {
                  onNext(response)
                }
            }
        }
    }
    {{/isManyOutput}}
    {{/isManyInput}}
    {{#isManyInput}}
    {{^isManyOutput}}
    {{! == streaming req, unary resp == }}
    open suspend fun {{methodName}}(requests: ReceiveChannel<{{inputType}}>): {{outputType}} {
        throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
    }

    internal fun {{methodName}}Internal(
        responseObserver: StreamObserver<{{outputType}}>
    ): StreamObserver<{{inputType}}> {
        val requests = StreamObserverChannel<{{inputType}}>()
        launch {
            tryCatchingStatus(responseObserver) {
                val response = {{methodName}}(requests)
                onNext(response)
            }
        }
        return requests
    }
    {{/isManyOutput}}
    {{#isManyOutput}}
    {{! == streaming req, streaming resp == }}
    open fun {{methodName}}(requests: ReceiveChannel<{{inputType}}>): ReceiveChannel<{{outputType}}> {
        throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
    }

    internal fun {{methodName}}Internal(
        responseObserver: StreamObserver<{{outputType}}>
    ): StreamObserver<{{inputType}}> {
        val requests = StreamObserverChannel<{{inputType}}>()
        launch {
            tryCatchingStatus(responseObserver) {
                val responses = {{methodName}}(requests)
                for (response in responses) {
                    onNext(response)
                }
            }
        }
        return requests
    }
    {{/isManyOutput}}
    {{/isManyInput}}
    {{/methods}}

    override fun bindService(): ServerServiceDefinition {
        return ServerServiceDefinition.builder(getServiceDescriptor())
            {{#methods}}
            .addMethod(
                get{{methodNamePascalCase}}Method(),
                ServerCalls.{{grpcCallsMethodName}}(
                    MethodHandlers(METHODID_{{methodNameUpperUnderscore}})
                )
            )
            {{/methods}}
            .build()
    }

    private fun unimplemented(methodDescriptor: MethodDescriptor<*, *>): Status {
        return Status.UNIMPLEMENTED
            .withDescription("Method ${methodDescriptor.fullMethodName} is unimplemented")
    }

    private fun <E> handleException(t: Throwable?, responseObserver: StreamObserver<E>) {
        when (t) {
            null -> return
            is CancellationException -> handleException(t.cause, responseObserver)
            is StatusException, is StatusRuntimeException -> responseObserver.onError(t)
            is RuntimeException -> {
                responseObserver.onError(Status.UNKNOWN.asRuntimeException())
                throw t
            }
            is Exception -> {
                responseObserver.onError(Status.UNKNOWN.asException())
                throw t
            }
            else -> {
                responseObserver.onError(Status.INTERNAL.asException())
                throw t
            }
        }
    }

    private suspend fun <E> tryCatchingStatus(responseObserver: StreamObserver<E>, body: suspend StreamObserver<E>.() -> Unit) {
        try {
            responseObserver.body()
            responseObserver.onCompleted()
        } catch (t: Throwable) {
            handleException(t, responseObserver)
        }
    }

    {{#methods}}
    private val METHODID_{{methodNameUpperUnderscore}} = {{methodNumber}}
    {{/methods}}

    private inner class MethodHandlers<Req, Resp> internal constructor(
        private val methodId: Int
    ) : ServerCalls.UnaryMethod<Req, Resp>,
        ServerCalls.ServerStreamingMethod<Req, Resp>,
        ServerCalls.ClientStreamingMethod<Req, Resp>,
        ServerCalls.BidiStreamingMethod<Req, Resp> {

        @Suppress("UNCHECKED_CAST")
        override fun invoke(request: Req, responseObserver: StreamObserver<Resp>) {
            when (methodId) {
                {{#methods}}
                {{^isManyInput}}
                METHODID_{{methodNameUpperUnderscore}} ->
                    this@{{serviceName}}ImplBase.{{methodName}}Internal(
                        request as {{inputType}},
                        responseObserver as StreamObserver<{{outputType}}>
                    )
                {{/isManyInput}}
                {{/methods}}
                else -> throw AssertionError()
            }
        }

        @Suppress("UNCHECKED_CAST")
        override fun invoke(responseObserver: StreamObserver<Resp>): StreamObserver<Req> {
            when (methodId) {
                {{#methods}}
                {{#isManyInput}}
                METHODID_{{methodNameUpperUnderscore}} ->
                    return this@{{serviceName}}ImplBase.{{methodName}}Internal(
                        responseObserver as StreamObserver<{{outputType}}>
                    ) as StreamObserver<Req>
                {{/isManyInput}}
                {{/methods}}
                else -> throw AssertionError()
            }
        }
    }
}
